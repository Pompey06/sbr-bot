import axios from "axios";
import React, { createContext, useEffect, useRef, useState } from "react";
import { useTranslation } from "react-i18next";
import chatI18n from "../i18n";
import {
  getFilePathByBotIndex,
  getFilePaths,
  hasBadFeedbackPrompt,
  isChatDeleted,
  markChatAsDeleted,
  saveBadFeedbackPromptState,
  saveFeedbackState,
  saveMessageId,
} from "../utils/feedbackStorage";
import mockCategories from "./mockCategories.json";

const ChatContext = createContext();

const ChatProvider = ({ children }) => {
  const { t, i18n } = useTranslation(undefined, { i18n: chatI18n });
  const [translationsKz, setTranslationsKz] = useState({});
  const [categories, setCategories] = useState([]);
  const [currentCategory, setCurrentCategory] = useState(null);
  const [currentSubcategory, setCurrentSubcategory] = useState(null);
  const [inputPrefill, setInputPrefill] = useState("");
  const streamingIndexRef = useRef(null);
  const [isInBinFlow, setIsInBinFlow] = useState(false);
  const api = axios.create({
    baseURL: import.meta.env.VITE_API_URL,
    withCredentials: true,
  });
  // –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è B-–±—ç–∫–∞
  const apiNew = axios.create({
    baseURL: import.meta.env.VITE_API_URL_NEW || "http://172.16.17.4:8001",
    withCredentials: false,
  });
  const USE_STREAMING_API = true;
  // helper: —Å–æ–∑–¥–∞–Ω–∏–µ backend-—Å–µ—Å—Å–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç session_id)
  const getOrCreateUserId = () => {
    try {
      const KEY = "sbr_user_id";
      const stored = localStorage.getItem(KEY);
      if (stored) return stored;
      const id =
        typeof crypto !== "undefined" && crypto.randomUUID
          ? crypto.randomUUID()
          : "uid-" +
            Math.random().toString(36).slice(2) +
            Date.now().toString(36);
      localStorage.setItem(KEY, id);
      return id;
    } catch {
      // –µ—Å–ª–∏ localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      return typeof crypto !== "undefined" && crypto.randomUUID
        ? crypto.randomUUID()
        : "uid-" +
            Math.random().toString(36).slice(2) +
            Date.now().toString(36);
    }
  };
  const [userId] = useState(() => getOrCreateUserId());

  const createBackendSession = async ({ sessionName }) => {
    const payload = {
      user_id: userId,
      session_name: sessionName || "New chat",
    };
    const { data } = await apiNew.post("/api/sessions", payload, {
      headers: { "Content-Type": "application/json" },
      withCredentials: false,
    });
    return data?.session_id;
  };

  const createDefaultChat = () => ({
    id: null,
    title: null,
    messages: [
      {
        text: t("chat.greeting"),
        isUser: false,
        isFeedback: false,
        isButton: false,
        isGreeting: true,
      },
    ],
    lastUpdated: new Date().toISOString(), // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    isEmpty: true,
    showInitialButtons: true,
    buttonsWereHidden: false,
    buttonsWereShown: false,
    isBinChat: false,
  });

  function autoDeleteInactiveChats() {
    const now = new Date();
    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

    setChats((prevChats) => {
      // –í—ã–¥–µ–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–∞—Ç (id === null) –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äì –æ–Ω –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—é
      const defaultChat = prevChats.find((chat) => chat.id === null);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ —á–∞—Ç—ã —Å id !== null, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (lastUpdated –Ω–µ —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏)
      const activeNonDefault = prevChats
        .filter((chat) => chat.id !== null)
        .filter((chat) => new Date(chat.lastUpdated) >= weekAgo);

      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤ —Å id !== null)
      prevChats.forEach((chat) => {
        if (chat.id !== null) {
          const lastUpdatedDate = new Date(chat.lastUpdated);
          if (lastUpdatedDate < weekAgo) {
            markChatAsDeleted(chat.id);
          }
        }
      });

      // –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤: –µ—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–∞—Ç –µ—Å—Ç—å, –æ–Ω –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è
      const newChats = defaultChat
        ? [defaultChat, ...activeNonDefault]
        : activeNonDefault;

      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —É–¥–∞–ª–µ–Ω (–∏–ª–∏ –µ–≥–æ id –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º –º–∞—Å—Å–∏–≤–µ), –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è:
      if (
        currentChatId &&
        !newChats.some((chat) => String(chat.id) === String(currentChatId))
      ) {
        if (activeNonDefault.length > 0) {
          setCurrentChatId(activeNonDefault[0].id);
        } else if (defaultChat) {
          setCurrentChatId(defaultChat.id);
        }
      }

      return newChats;
    });
  }

  const [chats, setChats] = useState(() => [createDefaultChat()]);
  const [currentChatId, setCurrentChatId] = useState(null);
  const [isTyping, setIsTyping] = useState(false);
  const [categoryFilter, setCategoryFilter] = useState(null);
  const [locale, setLocale] = useState("ru");

  useEffect(() => {
    setChats((prevChats) =>
      prevChats.map((chat) => ({
        ...chat,
        messages: chat.messages.map((message) =>
          message.text === chat.messages[0].text
            ? { ...message, text: t("chat.greeting") }
            : message,
        ),
      })),
    );
  }, [i18n.language, t]);

  useEffect(() => {
    const currentLanguage = i18n.language === "“õ–∞–∑" ? "kz" : "ru";
    setLocale(currentLanguage);
  }, [i18n.language]);

  const updateFavicon = (lang) => {
    let faviconPath = "/logo_ru.png"; // –¥–µ—Ñ–æ–ª—Ç

    if (lang === "“õ–∞–∑") faviconPath = "/logo_kz.png";
    if (lang === "—Ä—É—Å") faviconPath = "/logo_ru.png";
    if (lang === "eng") faviconPath = "/logo_en.png";

    const favicon = document.getElementById("dynamic-favicon");
    if (favicon) {
      favicon.href = faviconPath;
    } else {
      const link = document.createElement("link");
      link.id = "dynamic-favicon";
      link.rel = "icon";
      link.type = "image/png";
      link.href = faviconPath;
      document.head.appendChild(link);
    }
  };

  const updateLocale = (lang) => {
    let newLocale = "ru";
    if (lang === "“õ–∞–∑") newLocale = "kz";
    if (lang === "—Ä—É—Å") newLocale = "ru";
    if (lang === "eng") newLocale = "en";

    setLocale(newLocale);
    i18n.changeLanguage(lang);
    localStorage.setItem("locale", lang);
    updateFavicon(lang);
  };

  const mapLangForNewApi = (loc) => (loc === "kz" ? "kk" : "ru");

  const fetchChatHistory = async (sessionId, limit = 50) => {
    try {
      // NEW B-backend: GET /api/sessions/{session_id}/history?limit=50
      const { data } = await apiNew.get(`/api/sessions/${sessionId}/history`, {
        params: { limit },
      });

      const baseMessages = (data?.messages || []).map((m) => ({
        text: m?.content ?? "",
        isUser: m?.role === "user",
        isFeedback: false,
        isButton: false,
        timestamp: m?.timestamp,
        hasExcel: !!m?.has_excel,
        excelFile: m?.has_excel
          ? {
              file_id: m?.excel_file_id,
              filename: m?.excel_filename,
            }
          : null,
        hasChart: !!m?.has_chart,
        chart: m?.has_chart
          ? {
              chart_id: m?.chart_id,
              chart_type: m?.chart_type,
            }
          : null,
      }));

      // UPDATED: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      try {
        let botIndex = 0;
        (data?.messages || []).forEach((m) => {
          if (m?.role === "assistant" && m?.id) {
            saveMessageId(sessionId, botIndex, m.id);
            console.log("üíæ stored message_id:", {
              chat: sessionId,
              botIndex,
              message_id: m.id,
            });
            botIndex++;
          }
        });
      } catch (err) {
        console.error("restore message_id failed:", err);
      }

      // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ filePaths –¥–ª—è –±–æ—Ç-–æ—Ç–≤–µ—Ç–æ–≤
      const savedFilePaths = getFilePaths(sessionId);
      let botIndex = 0;
      const withFiles = baseMessages.map((msg, idx) => {
        if (!msg.isUser) {
          const pathsByBot = getFilePathByBotIndex(sessionId, botIndex) || [];
          const savedByIdx = Array.isArray(savedFilePaths[idx])
            ? savedFilePaths[idx]
            : savedFilePaths[idx]
            ? [savedFilePaths[idx]]
            : [];
          botIndex += 1;
          return {
            ...msg,
            filePaths: [
              ...new Set([
                ...(msg.filePaths || []),
                ...pathsByBot,
                ...savedByIdx,
              ]),
            ],
          };
        }
        return msg;
      });

      // –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ isAssistantResponse —Ç—É–¥–∞, –≥–¥–µ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const normalized = withFiles.map((message) => {
        if (
          !message.isUser &&
          !message.isFeedback &&
          !message.badFeedbackPrompt &&
          !message.isCustomMessage
        ) {
          return { ...message, isAssistantResponse: true };
        }
        return message;
      });

      // –≤—Å—Ç–∞–≤–∏–º ¬´–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã¬ª, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ
      if (hasBadFeedbackPrompt(sessionId)) {
        normalized.push({
          text: t("feedback.badFeedbackPromptText"),
          isUser: false,
          isFeedback: false,
          badFeedbackPrompt: true,
          isAssistantResponse: false,
        });
      }

      return {
        session_id: sessionId,
        messages: normalized,
        message_count: data?.message_count ?? normalized.length,
      };
    } catch (error) {
      console.error("Error fetching chat history:", error);
      throw error;
    }
  };

  const removeBadFeedbackMessage = () => {
    setChats((prevChats) =>
      prevChats.map((chat) => {
        if (
          String(chat.id) === String(currentChatId) ||
          (chat.id === null && currentChatId === null)
        ) {
          return {
            ...chat,
            messages: chat.messages.filter((msg) => !msg.badFeedbackPrompt),
          };
        }
        return chat;
      }),
    );
  };

  const fetchMyChats = async () => {
    try {
      const { data } = await apiNew.get(`/api/sessions/${userId}`);
      // –æ–∂–∏–¥–∞–µ–º { sessions: [{ id, name, created_at, updated_at, message_count }], total_count }
      return Array.isArray(data?.sessions) ? data.sessions : [];
    } catch (error) {
      console.error("Error fetching my chats:", error);
      throw error;
    }
  };

  useEffect(() => {
    const loadAndCleanChats = async () => {
      try {
        const sessions = await fetchMyChats();
        const filtered = sessions.filter((s) => !isChatDeleted(s.id));

        setChats((prevChats) => {
          const defaultChat =
            prevChats.find((c) => c.id === null) || createDefaultChat();
          const mapped = filtered.map((s) => ({
            ...createDefaultChat(),
            id: s.id,
            title: s.name || t("sidebar.newChat"),
            lastUpdated:
              s.updated_at || s.created_at || new Date().toISOString(),
            isEmpty: false,
          }));
          return [defaultChat, ...mapped];
        });

        autoDeleteInactiveChats();
      } catch (error) {
        console.error("Error loading existing chats:", error);
        setChats((prevChats) => {
          const defaultChat = prevChats.find((c) => c.id === null);
          return defaultChat ? [defaultChat] : [createDefaultChat()];
        });
      }
    };

    loadAndCleanChats();
  }, []); // –∑–∞–ø—É—Å–∫ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  const fetchInitialMessages = async () => {
    const USE_MOCK_CATEGORIES = false;

    if (categories.length > 0) {
      updateChatWithExistingCategories();
      return;
    }

    try {
      let fetchedCategories = []; // Initialize with empty array
      let fetchedTranslations = {};

      if (USE_MOCK_CATEGORIES) {
        // –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ mockCategories.json
        fetchedCategories = mockCategories.categories || [];
        fetchedTranslations = mockCategories.translations_kz || {};
      }
      // } else {
      //   // —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–∞ –±—ç–∫–µ–Ω–¥
      //   const res = await api.get("/assistant/categories");
      //   fetchedCategories = res.data?.categories || [];
      //   fetchedTranslations = res.data?.translations_kz || {};
      // }

      setCategories(fetchedCategories);
      setTranslationsKz(fetchedTranslations);

      // Only call updateChatWithCategories if we have categories
      if (fetchedCategories && fetchedCategories.length > 0) {
        updateChatWithCategories(fetchedCategories);
      } else {
        console.warn(
          "No categories fetched, skipping updateChatWithCategories",
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      // Set empty arrays to prevent undefined errors
      setCategories([]);
      setTranslationsKz({});
    }
  };

  //const fetchInitialMessages = async () => {
  //   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  //   if (categories.length > 0) {
  //      updateChatWithExistingCategories();
  //      return;
  //   }

  //   try {
  //      let fetchedCategories;
  //      let fetchedTranslations;

  //      // === TEST STUB: –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º JSON —Å faq –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
  //      if (import.meta.env.DEV) {
  //         const testData = {
  //            categories: [],
  //            translations_kz: {
  //               "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã": "–ñ–∞–ª–ø—ã —Å“±—Ä–∞“õ—Ç–∞—Ä",
  //               –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: "–∞–Ω—ã“õ—Ç–∞–º–∞",
  //               —Ü–µ–ª—å: "–º–∞“õ—Å–∞—Ç",
  //               —Å—Ä–æ–∫: "–º–µ—Ä–∑—ñ–º",
  //               "–º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è": "”©—Ç–∫—ñ–∑—É ”ô–¥—ñ—Å—ñ",
  //               –æ—Ö–≤–∞—Ç: "“õ–∞–º—Ç—É",
  //               "–∑–∞–∫–æ–Ω (–æ—Å–Ω–æ–≤–∞–Ω–∏–µ)": "–∑–∞“£ (–Ω–µ–≥—ñ–∑)",
  //               —ç—Ç–∞–ø: "–∫–µ–∑–µ“£",
  //               –∑–∞—â–∏—Ç–∞: "“õ–æ—Ä“ì–∞—É",
  //               "—É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω": "—É”ô–∫—ñ–ª–µ—Ç—Ç—ñ –æ—Ä–≥–∞–Ω",
  //               —Ä–æ–ª—å: "—Ä”©–ª",
  //               –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: "—Å“±—Ö–±–∞—Ç—à—ã",
  //               "–∏—Å—Ç–æ—Ä–∏—è –°–•–ü": "–ê”®–® —Ç–∞—Ä–∏—Ö—ã",
  //               "–ø–µ—Ä–µ–ø–∏—Å–Ω—ã–µ –ª–∏—Å—Ç—ã": "—Å–∞–Ω–∞“õ –ø–∞—Ä–∞“õ—Ç–∞—Ä—ã",
  //               "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤": "–°–∞–Ω–∞“õ –ø–∞—Ä–∞“õ—Ç–∞—Ä—ã–Ω —Ç–æ–ª—Ç—ã—Ä—É",
  //               "3-–õ–ü–•": "3-–ñ–®“ö",
  //               "2-–°–•–ü (–ö–§–•)": "2-–ê”®–® (–ö–§–®)",
  //               "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø—Ä–æ—Å—É": "–°“±—Ä–∞—É –±–æ–π—ã–Ω—à–∞ –∂–∞–ª–ø—ã —Å“±—Ä–∞“õ—Ç–∞—Ä",
  //               "–°–∞–π—Ç –°–∞–Ω–∞–∫.–≥–æ–≤": "–°–∞–Ω–∞–∫.–≥–æ–≤ —Å–∞–π—Ç—ã",
  //               –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
  //               "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞": "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã “õ–∞—Ç–µ—Å—ñ",
  //               –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: "–¢—ñ—Ä–∫–µ—É",
  //               NCALayer: "NCALayer",
  //            },
  //         };
  //         fetchedCategories = testData.categories;
  //         fetchedTranslations = testData.translations_kz;
  //      } else {
  //         // —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–∞ –±—ç–∫–µ–Ω–¥
  //         const res = await api.get(`/assistant/categories`);
  //         fetchedCategories = res.data.categories;
  //         fetchedTranslations = res.data.translations_kz || {};
  //      }

  //      // –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç–µ–π—Ç –∏ —Ä–µ–Ω–¥–µ—Ä—É –∫–Ω–æ–ø–æ–∫
  //      setCategories(fetchedCategories);
  //      setTranslationsKz(fetchedTranslations);
  //      updateChatWithCategories(fetchedCategories);
  //   } catch (error) {
  //      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
  //   }
  //};

  async function deleteChat(chatId) {
    // 1) –õ–æ–∫–∞–ª—å–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    markChatAsDeleted(chatId);

    // 2) –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ + –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    const prev = chats;
    setChats((prevChats) => {
      const newChats = prevChats.filter(
        (chat) => String(chat.id) !== String(chatId),
      );
      if (String(currentChatId) === String(chatId)) {
        if (newChats.length > 0) {
          setCurrentChatId(newChats[newChats.length - 1].id);
        } else {
          const newChat = createDefaultChat();
          newChats.push(newChat);
          setCurrentChatId(newChat.id);
        }
      }
      return newChats;
    });

    // 3) –ë—ç–∫–µ–Ω–¥: DELETE /api/sessions/{session_id}
    try {
      await apiNew.delete(`/api/sessions/${chatId}`, {
        headers: { Accept: "application/json" },
        withCredentials: false,
      });
    } catch (e) {
      console.error("Backend delete failed, rolling back:", e);
      // –µ—Å–ª–∏ —É–ø–∞–ª–æ ‚Äî –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      setChats(prev);
    }
  }

  const updateChatWithCategories = (fetchedCategories) => {
    // Safety check: ensure fetchedCategories is an array
    if (!fetchedCategories || !Array.isArray(fetchedCategories)) {
      console.warn(
        "updateChatWithCategories: fetchedCategories is not a valid array:",
        fetchedCategories,
      );
      return;
    }

    setChats((prev) =>
      prev.map((chat) => {
        if (
          chat.isEmpty &&
          (String(chat.id) === String(currentChatId) ||
            (chat.id === null && currentChatId === null))
        ) {
          return {
            ...chat,
            messages: [
              chat.messages[0],
              ...fetchedCategories.slice(0, 4).map((cat) => ({
                text:
                  i18n.language === "“õ–∞–∑"
                    ? translationsKz[cat.name] || cat.name
                    : cat.name,
                isUser: true,
                isFeedback: false,
                isButton: true,
                category: cat,
              })),
            ],
            buttonsWereShown: true,
          };
        }
        return chat;
      }),
    );
  };

  const updateChatWithExistingCategories = () => {
    setChats((prev) =>
      prev.map((chat) => {
        if (
          chat.isEmpty &&
          (String(chat.id) === String(currentChatId) ||
            (chat.id === null && currentChatId === null))
        ) {
          const categoryButtons = categories.slice(0, 4).map((cat) => ({
            text:
              i18n.language === "“õ–∞–∑"
                ? translationsKz[cat.name] || cat.name
                : cat.name,
            isUser: true,
            isFeedback: false,
            isButton: true,
            name: cat.name,
            category: cat,
            subcategories: cat.subcategories,
            faq: cat.faq,
          }));

          return {
            ...chat,
            messages: [chat.messages[0], ...categoryButtons],
            buttonsWereShown: true,
          };
        }
        return chat;
      }),
    );
  };

  useEffect(() => {
    if (currentChatId === null) {
      if (currentSubcategory) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë reports
        handleButtonClick({
          ...currentSubcategory,
          subcategory: true,
          category: currentCategory,
        });
      } else if (currentCategory) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        handleButtonClick(currentCategory);
      } else if (categories.length > 0) {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        updateChatWithExistingCategories();
      }
    }
  }, [i18n.language]);

  // –û–±–Ω–æ–≤–ª—è–µ–º useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–æ–≤
  useEffect(() => {
    const currentChat = chats.find(
      (c) =>
        String(c.id) === String(currentChatId) ||
        (c.id === null && currentChatId === null),
    );

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç–æ–π –∏ –∫–Ω–æ–ø–∫–∏ –µ—â—ë –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (currentChat?.isEmpty && !currentChat.buttonsWereShown) {
      fetchInitialMessages();
    }
  }, [currentChatId]);

  useEffect(() => {
    // –µ—Å–ª–∏ –º—ã –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º (–ø—É—Å—Ç–æ–º) —á–∞—Ç–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å
    if (
      currentChatId === null &&
      !currentCategory &&
      !currentSubcategory &&
      categories.length > 0
    ) {
      updateChatWithExistingCategories();
    }
  }, [i18n.language, categories]);

  const createNewChat = () => {
    // –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setCurrentCategory(null);
    setCurrentSubcategory(null);
    setCategoryFilter(null);

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–∞—Ç
    const newChat = createDefaultChat();

    setChats((prev) => {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø–µ—Ä–≤—ã–º –∏ –∞–∫—Ç–∏–≤–Ω—ã–º
      const updated = [newChat, ...prev.filter((c) => c.id !== null)];
      return updated;
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    setCurrentChatId(null);

    // –Ø–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    fetchInitialMessages();

    console.log("üÜï –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω");
  };

  const switchChat = async (chatId) => {
    setCurrentCategory(null);
    setCurrentSubcategory(null);
    setCategoryFilter(null);
    if (String(chatId) === String(currentChatId)) {
      return;
    }

    try {
      if (chatId !== null) {
        const chatHistory = await fetchChatHistory(chatId);

        setChats((prevChats) =>
          prevChats.map((chat) => {
            if (String(chat.id) === String(chatId)) {
              return {
                ...chat,
                messages: [
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                  chat.messages[0],
                  ...chatHistory.messages,
                ],
                title: chatHistory?.title ?? chat.title,
                isEmpty: false,
                showInitialButtons: false,
                buttonsWereHidden: true,
              };
            }
            return chat;
          }),
        );
      }

      setCurrentChatId(chatId);
    } catch (error) {
      console.error("Error switching chat:", error);
    }
  };

  async function createMessageStatic(
    text,
    isFeedback = false,
    additionalParams = {},
  ) {
    if (!text) return;

    const {
      category: apCategory,
      subcategory: apSubcategory,
      subcategory_report: apSubReport,
    } = additionalParams;
    setIsTyping(true);

    // 1Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setChats((prevChats) =>
      prevChats.map((chat) => {
        if (
          String(chat.id) === String(currentChatId) ||
          (chat.id === null && chat === prevChats[0])
        ) {
          return {
            ...chat,
            isEmpty: false,
            lastUpdated: new Date().toISOString(),
            messages: [
              ...chat.messages.filter((msg) => !msg.isButton),
              { text, isUser: true, isFeedback },
            ],
          };
        }
        return chat;
      }),
    );

    // 2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const tempAssistantMessage = {
      text: "",
      isUser: false,
      isFeedback: false,
      filePaths: [],
      hasLineBreaks: false,
      isAssistantResponse: true,
      streaming: true,
    };

    setChats((prevChats) =>
      prevChats.map((chat) => {
        if (
          String(chat.id) === String(currentChatId) ||
          (chat.id === null && chat === prevChats[0])
        ) {
          return {
            ...chat,
            messages: [...chat.messages, tempAssistantMessage],
          };
        }
        return chat;
      }),
    );

    try {
      // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const updateLastMessage = (newText, streamingFlag = true) => {
        const formattedText = newText.replace(/\\n/g, "\n");
        setChats((prevChats) =>
          prevChats.map((chat) => {
            const idx = chat.messages.findIndex((msg) => msg.streaming);
            if (idx === -1) return chat;
            const updatedMsg = {
              ...chat.messages[idx],
              text: formattedText,
              streaming: streamingFlag,
            };
            const updatedMessages = [...chat.messages];
            updatedMessages[idx] = updatedMsg;
            return { ...chat, messages: updatedMessages };
          }),
        );
      };

      let accumulatedText = "";

      // 3Ô∏è‚É£ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ session_id
      let sessionId = currentChatId;
      if (!sessionId) {
        const sessionName = (text || "New chat").slice(0, 50);
        sessionId = await createBackendSession({ sessionName });
        if (sessionId) {
          setCurrentChatId(sessionId);
          setChats((prev) => {
            const ci = prev.findIndex((c) =>
              c.messages.some((m) => m.streaming),
            );
            if (ci === -1) return prev;
            const updated = {
              ...prev[ci],
              id: sessionId,
              title: prev[ci].title ?? sessionName,
              isEmpty: false,
            };
            const copy = [...prev];
            copy[ci] = updated;
            return copy;
          });

          // UPDATED: —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          try {
            await apiNew.put(`/api/sessions/${sessionId}/name`, {
              session_name: sessionName,
            });
            console.log("üìù session name updated:", sessionName);
          } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏:", err);
          }
        }
      }

      // 4Ô∏è‚É£ –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ API
      const body = {
        query: text,
        session_id: sessionId || null,
        user_id: userId,
        language: mapLangForNewApi(locale),
      };

      const { data } = await apiNew.post("/api/chat", body, {
        headers: { "Content-Type": "application/json" },
        withCredentials: false,
      });

      console.log("üí¨ /api/chat static response:", data);

      const {
        response: answer,
        session_id: sid,
        sql_query,
        raw_data,
        error: isError,
        message_id,
        chart,
        has_excel,
        excel_file,
        show_table,
        table_columns,
      } = data || {};

      accumulatedText += typeof answer === "string" ? answer : "";
      updateLastMessage(accumulatedText, false);

      // 5Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      setChats((prev) => {
        const ci = prev.findIndex((c) =>
          c.messages.some((m) => m.isAssistantResponse),
        );
        if (ci === -1) return prev;

        let msgIdx = -1;
        for (let i = prev[ci].messages.length - 1; i >= 0; i--) {
          if (prev[ci].messages[i].isAssistantResponse) {
            msgIdx = i;
            break;
          }
        }
        if (msgIdx === -1) return prev;

        const updatedMsg = {
          ...prev[ci].messages[msgIdx],
          text: accumulatedText,
          streaming: false,
          isAssistantResponse: true,
          sqlQuery: sql_query || "",
          rawData: Array.isArray(raw_data) ? raw_data : [],
          chart: chart?.success ? chart : null,
          isError: !!isError,
          excelFile: excel_file || null,
          hasExcel: has_excel || false,
          showTable: show_table || false,
          tableColumns: table_columns || [],
        };

        const updatedMessages = [...prev[ci].messages];
        updatedMessages[msgIdx] = updatedMsg;

        const chatUpdated = {
          ...prev[ci],
          messages: updatedMessages,
          id: sid || prev[ci].id,
          title: prev[ci].title ?? (text || "New chat").slice(0, 50),
          lastUpdated: new Date().toISOString(),
        };

        return [...prev.slice(0, ci), chatUpdated, ...prev.slice(ci + 1)];
      });

      // 6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
      try {
        if (sid && message_id) {
          saveMessageId(sid, 0, message_id);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ message_id:", err);
      }

      if (sid) {
        setCurrentChatId(sid);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
      const errorMessage = {
        text: t("chatError.errorMessage"),
        isUser: false,
        isFeedback,
      };
      setChats((prevChats) =>
        prevChats.map((chat) => {
          if (
            String(chat.id) === String(currentChatId) ||
            (chat.id === null && chat === prevChats[0])
          ) {
            return { ...chat, messages: [...chat.messages, errorMessage] };
          }
          return chat;
        }),
      );
    } finally {
      setIsTyping(false);
    }
  }

  const handleButtonClick = (selectedItem) => {
    console.log("Selected item:", selectedItem);

    if (selectedItem.isSubcategory) {
      const categoryData = selectedItem.category || currentCategory;
      setCurrentCategory(categoryData);
      setCurrentSubcategory(selectedItem);
      setCategoryFilter(categoryData.name);

      // –ü—Ä—è—á–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –≥–æ—Ç–æ–≤–∏–º FAQ-–∫–Ω–æ–ø–∫–∏
      setChats((prevChats) =>
        prevChats.map((chat) => {
          const isCurrent =
            String(chat.id) === String(currentChatId) ||
            (chat.id === null && currentChatId === null);
          if (!isCurrent) return chat;

          // –°–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ FAQ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          const faqButtons = (categoryData.faq || []).map((f, i) => ({
            text:
              i18n.language === "“õ–∞–∑"
                ? translationsKz[f.question] || f.question
                : f.question,
            isUser: true,
            isFeedback: false,
            isButton: true,
            isFaq: true,
            faqData: f,
            key: `faq-${i}`,
          }));

          return {
            ...chat,
            showInitialButtons: false,
            buttonsWereHidden: true,
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –≤—Å–µ FAQ-–∫–Ω–æ–ø–∫–∏
            messages: [chat.messages[0], ...faqButtons],
          };
        }),
      );
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥—ë—Ç –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é, –∏ createMessage –ø–æ–¥—Ç—è–Ω–µ—Ç currentCategory/subcategory
      return;
    }

    // 2. –û—Ç—á—ë—Ç
    if (selectedItem.isReport) {
      const categoryData = currentCategory;
      setCategoryFilter(categoryData.name);
      createMessage(selectedItem.text, false, {
        category: categoryData.name,
        subcategory: currentSubcategory?.name ?? null,
        subcategory_report: selectedItem.reportText,
      });
      return;
    }

    // 4. –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    // 3. FAQ ‚Äî –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–ø—É—Ç –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    if (selectedItem.isFaq) {
      setInputPrefill(selectedItem.text);
      setChats((prev) =>
        prev.map((chat) => {
          const isCurrent =
            String(chat.id) === String(currentChatId) ||
            (chat.id === null && currentChatId === null);
          if (!isCurrent) return chat;
          return {
            ...chat,
            showInitialButtons: false,
            buttonsWereHidden: true,
            messages: [chat.messages[0]],
          };
        }),
      );
      return;
    }

    // 4. –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ—Ç–æ–º FAQ, –∏–Ω–∞—á–µ –∑–∞–≥–ª—É—à–∫–∞
    const categoryData = selectedItem.category || selectedItem;
    setCurrentCategory(categoryData);
    setCurrentSubcategory(null);
    setCategoryFilter(categoryData.name);

    if (categoryData.subcategories?.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
      setChats((prev) =>
        prev.map((chat) => {
          const isCurrent =
            String(chat.id) === String(currentChatId) ||
            (chat.id === null && currentChatId === null);
          if (!isCurrent) return chat;

          const subButtons = categoryData.subcategories.map((sub) => ({
            text:
              locale === "ru" ? sub.name : translationsKz[sub.name] || sub.name,
            isUser: true,
            isFeedback: false,
            isButton: true,
            isSubcategory: true,
            name: sub.name,
            category: categoryData,
          }));

          return {
            ...chat,
            showInitialButtons: false,
            buttonsWereHidden: true,
            messages: [chat.messages[0], ...subButtons],
          };
        }),
      );
    } else if (categoryData.faq?.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ FAQ, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
      setChats((prev) =>
        prev.map((chat) => {
          const isCurrent =
            String(chat.id) === String(currentChatId) ||
            (chat.id === null && currentChatId === null);
          if (!isCurrent) return chat;

          const faqButtons = categoryData.faq.map((f, i) => ({
            text:
              i18n.language === "“õ–∞–∑"
                ? translationsKz[f.question] || f.question
                : f.question,
            isUser: true,
            isFeedback: false,
            isButton: true,
            isFaq: true,
            faqData: f,
            key: `faq-${i}`,
          }));

          return {
            ...chat,
            showInitialButtons: false,
            buttonsWereHidden: true,
            messages: [chat.messages[0], ...faqButtons],
          };
        }),
      );
    } else {
      // –ù–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–∏ FAQ ‚Äî fallback
      setChats((prev) =>
        prev.map((chat) => {
          const isCurrent =
            String(chat.id) === String(currentChatId) ||
            (chat.id === null && currentChatId === null);
          if (!isCurrent) return chat;
          return {
            ...chat,
            showInitialButtons: false,
            buttonsWereHidden: true,
            messages: [chat.messages[0]],
          };
        }),
      );
    }
  };

  async function createMessageStreaming(
    text,
    isFeedback = false,
    additionalParams = {},
  ) {
    if (!text) return;

    setIsTyping(true);

    // === –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    setChats((prevChats) =>
      prevChats.map((chat) => {
        if (
          String(chat.id) === String(currentChatId) ||
          (chat.id === null && chat === prevChats[0])
        ) {
          return {
            ...chat,
            isEmpty: false,
            lastUpdated: new Date().toISOString(),
            messages: [
              ...chat.messages.filter((msg) => !msg.isButton),
              { text, isUser: true, isFeedback },
            ],
          };
        }
        return chat;
      }),
    );

    // === –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ===
    const tempAssistant = {
      text: "",
      isUser: false,
      isFeedback: false,
      isAssistantResponse: true,
      streaming: true,
    };

    setChats((prev) =>
      prev.map((chat) => {
        if (
          String(chat.id) === String(currentChatId) ||
          (chat.id === null && chat === prev[0])
        ) {
          return { ...chat, messages: [...chat.messages, tempAssistant] };
        }
        return chat;
      }),
    );

    try {
      // === —Å–æ–∑–¥–∞—ë–º –º–æ–∫ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ===
      const useMock = false;
      let reader;
      let decoder = new TextDecoder("utf-8");

      if (useMock) {
        const mockStream = await import("../../streamMock.json").then(
          (m) => m.default,
        );
        let index = 0;
        reader = {
          async read() {
            if (index < mockStream.length) {
              const line = "data: " + JSON.stringify(mockStream[index]) + "\n";
              index++;
              await new Promise((r) => setTimeout(r, 70));
              return { done: false, value: new TextEncoder().encode(line) };
            }
            return { done: true };
          },
        };
      } else {
        // UPDATED: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º session_id –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –≤ /api/chat
        let sessionId = currentChatId;
        if (!sessionId) {
          const sessionName = (text || "New chat").slice(0, 50);

          // —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
          sessionId = await createBackendSession({ sessionName });

          if (sessionId) {
            // –ª–æ–∫–∞–ª—å–Ω–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –Ω–æ–≤—ã–π id –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π title
            setCurrentChatId(sessionId);
            setChats((prev) => {
              const ci = prev.findIndex((c) =>
                c.messages.some((m) => m.streaming),
              );
              if (ci === -1) return prev;
              const updated = {
                ...prev[ci],
                id: sessionId,
                title: prev[ci].title ?? sessionName,
                isEmpty: false,
              };
              const copy = [...prev];
              copy[ci] = updated;
              return copy;
            });

            // —Å—Ä–∞–∑—É –¥–µ—Ä–≥–∞–µ–º PUT /api/sessions/{session_id}/name
            try {
              await apiNew.put(`/api/sessions/${sessionId}/name`, {
                session_name: sessionName,
              });
              console.log("üìù session name updated:", sessionName); // UPDATED
            } catch (err) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏:", err); // UPDATED
            }
          }
        }

        // –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –≤ /api/chat (—Å—Ç—Ä–∏–º)
        const response = await fetch(
          `${
            import.meta.env.VITE_API_URL_NEW || "http://172.16.17.4:8001"
          }/api/chat`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              query: text,
              session_id: sessionId || null,
              user_id: userId,
              language: mapLangForNewApi(locale),
            }),
          },
        );
        reader = response.body.getReader();
      }

      // === —á–∏—Ç–∞–µ–º –ø–æ—Ç–æ–∫ ===
      let buffer = "";
      let accumulatedText = "";
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        buffer += decoder.decode(value, { stream: true });

        const parts = buffer.split("\n");
        buffer = parts.pop(); // –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π –∫—É—Å–æ–∫

        for (const line of parts) {
          if (!line.startsWith("data:")) continue;
          const json = line.slice(5).trim();
          if (!json) continue;
          const parsed = JSON.parse(json);
          if (parsed.type === "text") {
            const chunkText =
              typeof parsed.content === "string"
                ? parsed.content
                : typeof parsed.content === "object"
                ? Object.values(parsed.content).join(" ")
                : String(parsed.content || "");

            accumulatedText += chunkText;

            setChats((prev) =>
              prev.map((chat) => {
                const idx = chat.messages.findIndex((m) => m.streaming);
                if (idx === -1) return chat;

                const updated = {
                  ...chat.messages[idx],
                  text: accumulatedText,
                  streaming: true,
                };

                const copy = [...chat.messages];
                copy[idx] = updated;
                return { ...chat, messages: copy };
              }),
            );
          } else if (parsed.type === "complete") {
            // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏ Excel
            // –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å –ø–æ–ª–µ "response", –±–µ—Ä—ë–º –∏–º–µ–Ω–Ω–æ –µ–≥–æ
            const safeResponse =
              typeof parsed.response === "object" && parsed.response?.response
                ? parsed.response.response
                : typeof parsed.response === "string"
                ? parsed.response
                : String(parsed.response || "");

            setChats((prev) =>
              prev.map((chat) => {
                const idx = chat.messages.findIndex((m) => m.streaming);
                if (idx === -1) return chat;

                const updated = {
                  ...chat.messages[idx],
                  text: safeResponse,
                  streaming: false,
                  chart: null,
                  excelFile:
                    parsed.excel_file || parsed.response?.excel_file || null,
                  hasExcel:
                    parsed.has_excel ||
                    parsed.response?.has_excel ||
                    !!parsed.response?.excel_file ||
                    false,
                  showTable:
                    parsed.show_table || parsed.response?.show_table || false,
                  tableColumns:
                    parsed.table_columns ||
                    parsed.response?.table_columns ||
                    [],
                  rawData: parsed.raw_data || parsed.response?.raw_data || [],
                };

                const copy = [...chat.messages];
                copy[idx] = updated;
                return { ...chat, messages: copy };
              }),
            );
          } else if (parsed.type === "end") {
            setIsTyping(false);
          }
        }
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–∫-—Å—Ç—Ä–∏–º–∏–Ω–≥–µ:", err);
      setIsTyping(false);
    }
  }

  const removeFeedbackMessage = (messageIndex) => {
    setChats((prevChats) =>
      prevChats.map((chat) => {
        if (
          chat.id === currentChatId ||
          (chat.id === null && currentChatId === null)
        ) {
          return {
            ...chat,
            messages: chat.messages.filter((msg, index) => {
              // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏–¥–±–µ–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ - —É–¥–∞–ª—è–µ–º –µ–≥–æ
              if (msg.isFeedback) {
                const botMessageIndex = getBotMessageIndex(
                  index,
                  chat.messages,
                );
                return botMessageIndex !== messageIndex;
              }
              return true;
            }),
          };
        }
        return chat;
      }),
    );
  };

  const getBotMessageIndex = (currentIndex) => {
    const currentChat = chats.find(
      (c) =>
        String(c.id) === String(currentChatId) ||
        (c.id === null && c === chats[0]),
    );

    if (!currentChat) return null;

    const messages = currentChat.messages;

    if (!messages[currentIndex]?.isFeedback) {
      return null;
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let messageCount = -1; // –ù–∞—á–∏–Ω–∞–µ–º —Å -1, —á—Ç–æ–±—ã –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å —Å 0

    for (let i = 1; i < currentIndex; i++) {
      // –ù–∞—á–∏–Ω–∞–µ–º —Å 1, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      const message = messages[i];

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–¥–±–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.isFeedback) {
        continue;
      }

      messageCount++;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –±–æ—Ç–∞ (–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –∏–Ω–¥–µ–∫—Å)
    return Math.floor(messageCount / 2) * 2 + 1;
  };
  // UPDATED: —Ñ–∏–∫—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ B-–±—ç–∫ (ChatContext.jsx)
  const sendFeedback = async (messageId, rate, text) => {
    try {
      if (!messageId) {
        console.warn("sendFeedback: messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        return;
      }

      const currentChat = chats.find(
        (c) =>
          String(c.id) === String(currentChatId) ||
          (c.id === null && c === chats[0]),
      );
      if (!currentChat?.id) {
        console.warn("sendFeedback: –Ω–µ—Ç session_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞");
        return;
      }

      const baseURL =
        import.meta.env.VITE_API_URL_NEW || "http://172.16.17.4:8001";
      const feedbackType = rate === "good" ? "like" : "dislike";

      const payload = {
        session_id: currentChat.id,
        user_id: userId,
        feedback_type: feedbackType,
        feedback_text: text || "",
      };

      console.log("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–¥–±–µ–∫–∞:", {
        url: `${baseURL}/api/messages/${messageId}/feedback`,
        payload,
      }); // UPDATED debug

      const response = await axios.post(
        `${baseURL}/api/messages/${messageId}/feedback`,
        payload,
        {
          headers: { "Content-Type": "application/json" },
          withCredentials: false,
        },
      );

      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–¥–±–µ–∫–∞:", error);
    }
  };

  const addBotMessage = (text) => {
    setChats((prev) =>
      prev.map((chat) => {
        if (
          String(chat.id) === String(currentChatId) ||
          (chat.id === null && chat === prev[0])
        ) {
          return {
            ...chat,
            messages: [
              ...chat.messages,
              {
                text,
                isUser: false,
                isFeedback: false,
              },
            ],
          };
        }
        return chat;
      }),
    );
  };

  // 2) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç ¬´–∫–Ω–æ–ø–æ—á–Ω—ã—Ö¬ª —Å–æ–æ–±—â–µ–Ω–∏–π
  const addButtonMessages = (buttons) => {
    setChats((prev) =>
      prev.map((chat) => {
        if (String(chat.id) === String(currentChatId)) {
          return { ...chat, messages: [...chat.messages, ...buttons] };
        }
        return chat;
      }),
    );
  };

  // === –û—Ç–ª–∞–¥–∫–∞ chart ===
  useEffect(() => {
    const currentChat = chats.find(
      (c) =>
        String(c.id) === String(currentChatId) ||
        (c.id === null && currentChatId === null),
    );
    if (!currentChat) return;

    const lastMessage = currentChat.messages[currentChat.messages.length - 1];
    if (lastMessage?.chart && lastMessage.chart.success) {
      console.log("üìä Chart detected:", lastMessage.chart);
      console.log("üìà chart_html:", lastMessage.chart.chart_html);
    }
  }, [chats, currentChatId]);

  const createMessage = USE_STREAMING_API
    ? createMessageStreaming
    : createMessageStatic;

  return (
    <ChatContext.Provider
      value={{
        chats,
        currentChatId,
        isTyping,
        setIsTyping,
        createNewChat,
        switchChat,
        createMessage,
        handleButtonClick,
        sendFeedback,
        getBotMessageIndex,
        removeFeedbackMessage,
        inputPrefill,
        setInputPrefill,
        showInitialButtons:
          chats.find(
            (c) =>
              String(c.id) === String(currentChatId) ||
              (c.id === null && c === chats[0]),
          )?.showInitialButtons || false,
        updateLocale,
        addButtonMessages,
        deleteChat,
        addBotMessage,
        setChats,
        removeBadFeedbackMessage,
        isInBinFlow,
        setIsInBinFlow,
      }}
    >
      {children}
    </ChatContext.Provider>
  );
};

export { ChatContext, ChatProvider };
